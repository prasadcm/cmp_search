input {
	file {
		path => "/usr/share/logstash/input/test.json"
		start_position => "beginning"
		sincedb_path => "/dev/null"
		codec => json
		ecs_compatibility => "disabled"
	}
}

filter {
	mutate {
		rename => {
			"phone_number" => "phoneNumber"
			"created_date" => "createdDate"
			"updated_date" => "updatedDate"
			"search_count" => "searchCount"
			"search_text" => "searchText"
			"product_icon" => "productIcon"
			"product_rank" => "productRank"
			"product_url" => "productUrl"
		}
		remove_field => ["host", "log", "event"]
	}

	ruby {
	code => "
		# Increment searchCount
		count = event.get('searchCount') || 0
		event.set('searchCount', count + 1)

		# Set timestamps
		now = Time.now.utc.strftime('%Y-%m-%dT%H:%M:%S.%LZ')
		event.set('createdDate', now) unless event.get('createdDate')
		event.set('updatedDate', now)

		# Normalize searchText
		search_text = event.get('searchText')
		search_text = search_text ? search_text.strip.downcase : ''
		event.set('searchText', search_text)

		# Set the document Id
		identifier = event.get('email') || event.get('phoneNumber')
		normalized_id = identifier ? identifier.strip.downcase : ''
		id = normalized_id + '-' + search_text
		id = id.gsub(/\s+/, '_')
		event.set('doc_id', id)
	"
	}
}

output {
stdout { codec => rubydebug }
	elasticsearch {
		"hosts" => "${ELASTICSEARCH_HOSTS}"
		"user" => "${ELASTICSEARCH_USERNAME}"
		"password" => "${ELASTICSEARCH_PASSWORD}"
		"index" => "${SEARCH_ITEM_INDEX_NAME}"
		"document_id" => "%{doc_id}"
		"ssl_enabled" => true
		"ssl_certificate_authorities" => "${CA_CERTIFICATE_PATH}"
		"action" => "update"
		"doc_as_upsert" => true
		"manage_template" => false
	}
}
